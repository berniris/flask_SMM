{"ast":null,"code":"var BASE_URL = \"http://localhost:5000\"; // used inside login - throws an error or returns response in jason\n\nfunction handleError(res) {\n  if (!res.ok) throw new Error(res.statusMessage);\n  console.log(res);\n  return res.json();\n}\n\nfunction checkToken() {\n  return new Promise(function (resolve, reject) {\n    var token = localStorage.getItem('jwt');\n\n    if (token) {\n      var user = token;\n      resolve(user);\n    }\n\n    reject();\n  });\n}\n\nfunction destroyToken() {\n  window.localStorage.removeItem(\"jwt\");\n}\n\nfunction login(input) {\n  var url = \"\".concat(BASE_URL, \"/login\");\n  var body = {\n    \"username\": input.username,\n    \"password\": input.password\n  };\n  var options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    },\n    mode: 'cors',\n    body: JSON.stringify(body)\n  };\n  fetch(url, options).then(handleError).then(function (res) {\n    localStorage.setItem(\"jwt\", res.access_token);\n    console.log(res.message);\n    return res.message;\n  }).catch(function (err) {\n    return console.log(err);\n  });\n}\n\nfunction register(input) {\n  var url = \"\".concat(BASE_URL, \"/registration\");\n  var body = {\n    \"username\": input.username,\n    \"password\": input.password\n  };\n  var options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    },\n    mode: 'cors',\n    body: JSON.stringify(body)\n  };\n  fetch(url, options).then(handleError).then(function (res) {\n    localStorage.setItem(\"jwt\", res.access_token);\n    console.log(res.access_token);\n    console.log(res.message);\n  }).catch(function (err) {\n    return console.log(err);\n  });\n}\n\nexport default {\n  login: login,\n  register: register,\n  checkToken: checkToken,\n  destroyToken: destroyToken\n};","map":{"version":3,"sources":["/Users/bcoleman/Documents/flask_SMM/client/src/services/AuthService.js"],"names":["BASE_URL","handleError","res","ok","Error","statusMessage","console","log","json","checkToken","Promise","resolve","reject","token","localStorage","getItem","user","destroyToken","window","removeItem","login","input","url","body","username","password","options","method","headers","mode","JSON","stringify","fetch","then","setItem","access_token","message","catch","err","register"],"mappings":"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","sourcesContent":["const BASE_URL = `http://localhost:5000`;\n\n\n// used inside login - throws an error or returns response in jason\nfunction handleError(res) {\n    if(!res.ok) throw new Error(res.statusMessage);\n    console.log(res);\n    return res.json();\n  }\n\nfunction checkToken() {\n  return new Promise((resolve, reject) => {\n    const token = localStorage.getItem('jwt');\n    if (token) {\n      const user = token;\n      resolve(user);\n    }\n    reject();\n  })\n}\n\n  function destroyToken() {\n  window.localStorage.removeItem(\"jwt\");\n  }\n\n\nfunction login(input) {\n    const url = `${BASE_URL}/login`;\n    const body = {\"username\": input.username, \"password\": input.password}\n    const options = { \n            method: 'POST',\n            headers: {'Content-Type': 'application/json', 'Accept': 'application/json'},\n            mode: 'cors',\n            body:JSON.stringify(body),\n            }\n    fetch(url, options)\n    .then(handleError)\n    .then(res => {\n     localStorage.setItem(\"jwt\", res.access_token)\n     console.log(res.message)\n     return res.message\n     })\n    .catch(err => console.log(err))\n}\n\nfunction register(input) {\n  const url = `${BASE_URL}/registration`;\n  const body = {\"username\": input.username, \"password\": input.password}\n  const options = { \n    method: 'POST',\n    headers: {'Content-Type': 'application/json', 'Accept': 'application/json'},\n    mode: 'cors',\n    body: JSON.stringify(body),\n  }\n  fetch(url, options)\n  .then(handleError)\n  .then(res => {\n    localStorage.setItem(\"jwt\", res.access_token)\n    console.log(res.access_token)\n    console.log(res.message)\n    })\n   .catch(err => console.log(err))\n}\n\nexport default {\n  login,\n  register,\n  checkToken,\n  destroyToken\n}"]},"metadata":{},"sourceType":"module"}